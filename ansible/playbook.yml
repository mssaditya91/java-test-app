- name: Configure application using Terraform outputs
  hosts: all
  become: yes

  vars:
    tf_outputs: "{{ lookup('file', 'tf_outputs.json') | from_json }}"
    eks_cluster_ca_certificate: "{{ tf_outputs.eks_cluster_ca_certificate.value }}"
    eks_cluster_endpoint: "{{ tf_outputs.eks_cluster_endpoint.value }}"
    eks_cluster_name: "{{ tf_outputs.eks_cluster_name.value }}"
    eks_node_group_role_arn: "{{ tf_outputs.eks_node_group_role_arn.value }}"
    public_subnet_ids: "{{ tf_outputs.public_subnet_ids.value }}"
    vpc_id: "{{ tf_outputs.vpc_id.value }}"

  tasks:
    - name: Print EKS cluster details
      debug:
        msg: |
          EKS Cluster Name: {{ eks_cluster_name }}
          EKS Endpoint: {{ eks_cluster_endpoint }}
          EKS CA Certificate: {{ eks_cluster_ca_certificate }}
          EKS Node Group Role ARN: {{ eks_node_group_role_arn }}
          Public Subnet IDs: {{ public_subnet_ids }}
          VPC ID: {{ vpc_id }}

    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install unzip
      apt:
        name: unzip
        state: present
      when: ansible_os_family == "Debian"

    - name: Download AWS CLI v2 installer
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Unzip AWS CLI v2 installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes
      when: ansible_os_family == "Debian"

    - name: Install AWS CLI v2
      command: /tmp/aws/install --update
      args:
        creates: /usr/local/bin/aws
      when: ansible_os_family == "Debian"

    - name: Save EKS CA certificate to file
      copy:
        dest: /root/eks-ca.crt
        content: "{{ eks_cluster_ca_certificate }}"
        owner: root
        group: root
        mode: '0600'
